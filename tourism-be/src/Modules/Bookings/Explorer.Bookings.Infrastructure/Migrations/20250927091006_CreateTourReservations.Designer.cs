// <auto-generated />
using System;
using Explorer.Bookings.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Explorer.Bookings.Infrastructure.Migrations
{
    [DbContext(typeof(BookingsContext))]
    [Migration("20250927091006_CreateTourReservations")]
    partial class CreateTourReservations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bookings")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.BonusPoints", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AvailablePoints")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TouristId")
                        .IsUnique();

                    b.ToTable("BonusPoints", "bookings");
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("ShoppingCartId")
                        .HasColumnType("bigint");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TourPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TourStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems", "bookings");
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.PurchaseItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TourPrice")
                        .HasColumnType("numeric");

                    b.Property<long?>("TourPurchaseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TourStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TourPurchaseId");

                    b.ToTable("PurchaseItems", "bookings");
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.ShoppingCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TouristId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts", "bookings");
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.TourPurchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BonusPointsUsed")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("TouristId");

                    b.ToTable("TourPurchases", "bookings");
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.CartItem", b =>
                {
                    b.HasOne("Explorer.Bookings.Core.Domain.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.PurchaseItem", b =>
                {
                    b.HasOne("Explorer.Bookings.Core.Domain.TourPurchase", null)
                        .WithMany("Items")
                        .HasForeignKey("TourPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Explorer.Bookings.Core.Domain.TourPurchase", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
